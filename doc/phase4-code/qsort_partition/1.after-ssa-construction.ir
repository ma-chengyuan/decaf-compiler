int partition(int p, int r) {
stack:
    stack:0 int p 
    stack:1 int r 
block_0: ; entry
    %0  = load stack:1            ; r     
    %1  = load stack:0            ; p     
    %2  = load_const 0            ; x     
    %3  = load_const 0            ; i     
    %4  = load_const 0            ; j     
    %5  = load_const 0            ; t     
    %6  = load_const 0            ; z     
    %7  = %1                      ; p     
    %8  = load_array global:A[%7] ; A[p]  
    %9  = %1                      ; p     
    %10 = load_const 1            ; 1     
    %11 = sub %9, %10             ; p - 1 
    %12 = %0                      ; r     
    %13 = load_const 1            ; 1     
    %14 = add %12, %13            ; r + 1 
    %15 = load_const 0            ; 0     
    jump block_2
block_1: ; for loop body at line 16
    %16 = load_const 0 ; a     
    %17 = %22          ; j     
    %18 = load_const 1 ; 1     
    %19 = sub %17, %18 ; j - 1 
    %20 = load_const 0 ; 0     
    jump block_5
block_2: ; for loop condition at line 16
    %21 = phi { block_0 -> %15, block_14 -> %75 } ; z                   
    %22 = phi { block_14 -> %35, block_0 -> %14 } ; j                   
    %23 = phi { block_0 -> %11, block_14 -> %56 } ; i                   
    %24 = %21                                     ; z                   
    %25 = load global:length                      ; length              
    %26 = load global:length                      ; length              
    %27 = mul %25, %26                            ; length * length     
    %28 = less %24, %27                           ; z < length * length 
    cond_jump %28 block_1 block_3
block_3:
    %29 = load_const -1 ; -1 
    return %29
block_4: ; for loop body at line 19
    %30 = %35                      ; j         
    %31 = load_array global:A[%30] ; A[j]      
    %32 = %8                       ; x         
    %33 = less_eq %31, %32         ; A[j] <= x 
    cond_jump %33 block_7 block_8
block_5: ; for loop condition at line 19
    %34 = phi { block_1 -> %20, block_8 -> %47 } ; a          
    %35 = phi { block_8 -> %44, block_1 -> %19 } ; j          
    %36 = %34                                    ; a          
    %37 = load global:length                     ; length     
    %38 = less %36, %37                          ; a < length 
    cond_jump %38 block_4 block_6
block_6:
    %39 = %23          ; i     
    %40 = load_const 1 ; 1     
    %41 = add %39, %40 ; i + 1 
    jump block_10
block_7: ; if-then block at line 20
    jump block_6
block_8:
    %42 = %35          ; j     
    %43 = load_const 1 ; 1     
    %44 = sub %42, %43 ; j - 1 
    %45 = %34          
    %46 = load_const 1 ; 1     
    %47 = add %45, %46 
    jump block_5
block_9: ; for loop body at line 25
    %48 = %52                      ; a         
    %49 = load_array global:A[%48] ; A[a]      
    %50 = %8                       ; x         
    %51 = less_eq %50, %49         ; A[a] >= x 
    cond_jump %51 block_12 block_13
block_10: ; for loop condition at line 25
    %52 = phi { block_13 -> %63, block_6 -> %41 } ; a          
    %53 = %52                                     ; a          
    %54 = load global:length                      ; length     
    %55 = less %53, %54                           ; a < length 
    cond_jump %55 block_9 block_11
block_11:
    %56 = phi { block_12 -> %60, block_10 -> %23 } ; i     
    %57 = %56                                      ; i     
    %58 = %35                                      ; j     
    %59 = less %57, %58                            ; i < j 
    cond_jump %59 block_14 block_15
block_12: ; if-then block at line 26
    %60 = %52 ; a 
    jump block_11
block_13:
    %61 = %52          
    %62 = load_const 1 ; 1 
    %63 = add %61, %62 
    jump block_10
block_14: ; if-then block at line 31
    %64 = %56                           ; i    
    %65 = load_array global:A[%64]      ; A[i] 
    %66 = %56                           ; i    
    %67 = %35                           ; j    
    %68 = load_array global:A[%67]      ; A[j] 
    %69 = store_array global:A[%66] %68 
    %70 = %35                           ; j    
    %71 = %65                           ; t    
    %72 = store_array global:A[%70] %71 
    %73 = %21                           
    %74 = load_const 1                  ; 1    
    %75 = add %73, %74                  
    jump block_2
block_15: ; if-else block at line 31
    %76 = %35 ; j 
    return %76
}
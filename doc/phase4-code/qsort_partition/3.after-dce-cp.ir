int partition(int p, int r) {
stack:
    stack:0 int p 
    stack:1 int r 
block_0: ; entry
    %0 = load stack:1            ; r     
    %1 = load stack:0            ; p     
    %2 = load_array global:A[%1] ; A[p]  
    %3 = load_const 1            ; 1     
    %4 = sub %1, %3              ; p - 1 
    %5 = load_const 1            ; 1     
    %6 = add %0, %5              ; r + 1 
    %7 = load_const 0            ; 0     
    jump block_2
block_1: ; for loop body at line 16
    %8  = load_const 1 ; 1     
    %9  = sub %12, %8  ; j - 1 
    %10 = load_const 0 ; 0     
    jump block_5
block_2: ; for loop condition at line 16
    %11 = phi { block_0 -> %7, block_14 -> %45 } ; z                   
    %12 = phi { block_0 -> %6, block_14 -> %22 } ; j                   
    %13 = phi { block_0 -> %4, block_14 -> %36 } ; i                   
    %14 = load global:length                     ; length              
    %15 = load global:length                     ; length              
    %16 = mul %14, %15                           ; length * length     
    %17 = less %11, %16                          ; z < length * length 
    cond_jump %17 block_1 block_3
block_3:
    %18 = load_const -1 ; -1 
    return %18
block_4: ; for loop body at line 19
    %19 = load_array global:A[%22] ; A[j]      
    %20 = less_eq %19, %2          ; A[j] <= x 
    cond_jump %20 block_7 block_8
block_5: ; for loop condition at line 19
    %21 = phi { block_8 -> %30, block_1 -> %10 } ; a          
    %22 = phi { block_1 -> %9, block_8 -> %28 }  ; j          
    %23 = load global:length                     ; length     
    %24 = less %21, %23                          ; a < length 
    cond_jump %24 block_4 block_6
block_6:
    %25 = load_const 1 ; 1     
    %26 = add %13, %25 ; i + 1 
    jump block_10
block_7: ; if-then block at line 20
    jump block_6
block_8:
    %27 = load_const 1 ; 1     
    %28 = sub %22, %27 ; j - 1 
    %29 = load_const 1 ; 1     
    %30 = add %21, %29 
    jump block_5
block_9: ; for loop body at line 25
    %31 = load_array global:A[%33] ; A[a]      
    %32 = less_eq %2, %31          ; A[a] >= x 
    cond_jump %32 block_12 block_13
block_10: ; for loop condition at line 25
    %33 = phi { block_6 -> %26, block_13 -> %39 } ; a          
    %34 = load global:length                      ; length     
    %35 = less %33, %34                           ; a < length 
    cond_jump %35 block_9 block_11
block_11:
    %36 = phi { block_10 -> %13, block_12 -> %33 } ; i     
    %37 = less %36, %22                            ; i < j 
    cond_jump %37 block_14 block_15
block_12: ; if-then block at line 26
    jump block_11
block_13:
    %38 = load_const 1 ; 1 
    %39 = add %33, %38 
    jump block_10
block_14: ; if-then block at line 31
    %40 = load_array global:A[%36]      ; A[i] 
    %41 = load_array global:A[%22]      ; A[j] 
    %42 = store_array global:A[%36] %41 
    %43 = store_array global:A[%22] %40 
    %44 = load_const 1                  ; 1    
    %45 = add %11, %44                  
    jump block_2
block_15: ; if-else block at line 31
    return %22
}
int partition(int p, int r) {
stack:
    stack:0 int p 
    stack:1 int r 
    stack:2 int z 
    stack:3 int j 
    stack:4 int i 
    stack:5 int a 
    stack:6 int j 
    stack:7 int a 
    stack:8 int i 
block_0: ; entry
    %0  = load stack:1            ; r     
    %1  = load stack:0            ; p     
    %2  = load_array global:A[%1] ; A[p]  
    %3  = load_const 1            ; 1     
    %4  = sub %1, %3              ; p - 1 
    %5  = add %0, %3              ; r + 1 
    %6  = load_const 0            ; 0     
    %38 = store stack:2 %6        
    %39 = store stack:3 %5        
    %40 = store stack:4 %4        
    jump block_2
block_1: ; for loop body at line 16
    %7  = sub %9, %3       ; j - 1 
    %44 = store stack:5 %6 
    %45 = store stack:6 %7 
    jump block_5
block_2: ; for loop condition at line 16
    %8  = load stack:2       ; z                   
    %9  = load stack:3       ; j                   
    %10 = load stack:4       ; i                   
    %11 = load global:length ; length              
    %12 = load global:length ; length              
    %13 = mul %11, %12       ; length * length     
    %14 = less %8, %13       ; z < length * length 
    cond_jump %14 block_1 block_3
block_3:
    %15 = load_const -1 ; -1 
    return %15
block_4: ; for loop body at line 19
    %16 = load_array global:A[%19] ; A[j]      
    %17 = less_eq %16, %2          ; A[j] <= x 
    cond_jump %17 block_7 block_8
block_5: ; for loop condition at line 19
    %18 = load stack:5       ; a          
    %19 = load stack:6       ; j          
    %20 = load global:length ; length     
    %21 = less %18, %20      ; a < length 
    cond_jump %21 block_4 block_6
block_6:
    %22 = add %10, %3       ; i + 1 
    %48 = store stack:7 %22 
    jump block_10
block_7: ; if-then block at line 20
    jump block_6
block_8:
    %23 = sub %19, %3       ; j - 1 
    %24 = add %18, %3       
    %46 = store stack:5 %24 
    %47 = store stack:6 %23 
    jump block_5
block_9: ; for loop body at line 25
    %25 = load_array global:A[%27] ; A[a]      
    %26 = less_eq %2, %25          ; A[a] >= x 
    cond_jump %26 block_12 block_13
block_10: ; for loop condition at line 25
    %27 = load stack:7       ; a          
    %28 = load global:length ; length     
    %29 = less %27, %28      ; a < length 
    cond_jump %29 block_9 block_16
block_11:
    %30 = load stack:8  ; i     
    %31 = less %30, %19 ; i < j 
    cond_jump %31 block_14 block_15
block_12: ; if-then block at line 26
    %50 = store stack:8 %27 
    jump block_11
block_13:
    %32 = add %27, %3       
    %49 = store stack:7 %32 
    jump block_10
block_14: ; if-then block at line 31
    %33 = load_array global:A[%30]      ; A[i] 
    %34 = load_array global:A[%19]      ; A[j] 
    %35 = store_array global:A[%30] %34 
    %36 = store_array global:A[%19] %33 
    %37 = add %8, %3                    
    %41 = store stack:2 %37             
    %42 = store stack:3 %19             
    %43 = store stack:4 %30             
    jump block_2
block_15: ; if-else block at line 31
    return %19
block_16:
    %51 = store stack:8 %10 
    jump block_11
}